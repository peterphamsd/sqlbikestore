/*
Request: 
		Hey, can we see what the total revenue generated by each store was between the first half of 2016? Maybe we're interested in this period of time?

Process: 
		We must identify which tables we're interested in. We're going to need the store_id and their name to rank them in order of their total revenue to assess their performance.
		To calculate their total revenue, we must take the listed price times the quantity sold. Additionally apply their discound on the products, then sum all of those up to compose
		a total revenue from each store. Lastly, we sort them in descending order. 
*/

SELECT
    o.store_id,                                                                                        
    s.store_name,
    SUM(oi.list_price * oi.quantity * (1 - oi.discount)) AS total_revenue
FROM
    sales.orders o                                                                                      
JOIN
    sales.order_items oi ON o.order_id = oi.order_id
JOIN
    sales.stores s ON o.store_id = s.store_id
WHERE
    o.order_date BETWEEN '2016-01-03' AND '2016-06-03'
GROUP BY
    o.store_id, s.store_name
ORDER BY
    total_revenue DESC;
    


/* 
Request: Hey, out of curiosity, what is our most popular product of all time?

Process: 
	We must first break down the classification of most popular product. This is equals to our most bought product, so we'll be dealing with quantity
    sold instead of revenue here. Firstly, we could see that we need the order_items table, along with the products and the category of product that
    it is in. Then we identify the components: product_id, product_name, category_name, and the total quantity sold of that product. Lastly sort it 
    by the total_quantity_sold in descending order to see the highest sold.

*/
SELECT
	oi.product_id,
	p.product_name,
	c.category_name,
	SUM(oi.quantity) AS total_quantity_sold
FROM
	sales.order_items oi
JOIN
	production.products p ON oi.product_id = p.product_id
JOIN
	production.categories c ON p.category_id = c.category_id
GROUP BY
	oi.product_id, p.product_name, c.category_name
ORDER BY
	total_quantity_sold DESC
LIMIT 5;


/* 
Request: Hey, I'm interested in knowing the products that were ordered the most last 4 months of 2016. Can you provide that information?

Process: 
	To find the products ordered the most in the last month, we need to use a subquery to filter orders based on the order date. We'll start by
    finding the order_ids for the orders placed in the last 4 months of 2016. Then, we'll use these order_ids to get the product information. The result 
    will include details like product_id, product_name, and the total quantity sold.

*/
SELECT
	p.product_id,
	p.product_name,
	SUM(oi.quantity) AS total_quantity_sold
FROM
	production.products p
JOIN
	sales.order_items oi ON p.product_id = oi.product_id
WHERE
	oi.order_id IN (
		SELECT
			order_id
		FROM
			sales.orders
		WHERE
			order_date BETWEEN '2016-09-1' AND '2017-01-01'
	)
GROUP BY
	p.product_id, p.product_name
ORDER BY
	total_quantity_sold DESC
LIMIT 5;


/* 
Request: I'm interested in understanding the longevity of our customers â€“ how long each customer has been actively making purchases.

Process: 
	To measure customer longevity, we calculate the duration between the first and last orders for customers who have made more than two orders. This involves joining customer, order, and order item data. We identify the 
    customer, count the distinct products they've purchased, calculate the average order value, and determine the duration they have been actively engaged by finding the difference between the dates of their first and last
    orders.
*/
SELECT
    c.customer_id,
    c.first_name,
    c.last_name,
    COUNT(DISTINCT oi.product_id) AS distinct_products_purchased,
    AVG(p.list_price * oi.quantity * (1 - oi.discount)) AS avg_order_value,
    DATEDIFF(MAX(o.order_date), MIN(o.order_date)) AS customer_duration
FROM
    sales.customers c
JOIN
    sales.orders o ON c.customer_id = o.customer_id
JOIN
    sales.order_items oi ON o.order_id = oi.order_id
JOIN
    production.products p ON oi.product_id = p.product_id
WHERE
    c.customer_id IN (
        SELECT customer_id
        FROM sales.orders
        GROUP BY customer_id
        HAVING COUNT(order_id) > 2
    )
GROUP BY
    c.customer_id, c.first_name, c.last_name
ORDER BY
    c.customer_id;
    

/* 
Request: We need a quick overview of our top-performing sales staff for the current quarter. Can you provide a list of staff members with the highest total sales during this quarter?

Process: 
	To identify the top-performing sales staff, we'll focus on total sales for the current quarter. By calculating the sum of sales amounts for each staff member, we can pinpoint those who have contributed the most to our revenue. The result will give a quick overview, helping in recognizing and appreciating the efforts of our high-performing sales team members.
*/
SELECT
    s.staff_id,
    s.first_name,
    s.last_name,
    SUM(oi.quantity * p.list_price * (1 - oi.discount)) AS total_sales_amount
FROM
    sales.staffs s
JOIN
    sales.orders o ON s.staff_id = o.staff_id
JOIN
    sales.order_items oi ON o.order_id = oi.order_id
JOIN
    production.products p ON oi.product_id = p.product_id
WHERE
    o.order_date BETWEEN '2016-01-01' and '2017-01-01'                                  -- SPECIFY HERE THE BETWEEN PERIODS, CAN ADJUST FOR QUARTERS OF THE YEAR. 
GROUP BY
    s.staff_id, s.first_name, s.last_name
ORDER BY
    total_sales_amount DESC, s.staff_id
